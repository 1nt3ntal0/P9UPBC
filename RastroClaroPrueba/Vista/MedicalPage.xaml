 using System;
using System.Threading.Tasks;
using Microsoft.Maui.Controls;
using RastroClaroPrueba.Models;
using RastroClaroPrueba.Utils;

namespace RastroClaroPrueba.Vista
{
    public partial class MedicalPage : ContentPage
    {
        private readonly ApiService _apiService;

        public MedicalPage()
        {
            InitializeComponent();
            _apiService = new ApiService();
            CargarDatosUsuario();
            CargarDatosPaciente();
        }

        private async void CargarDatosUsuario()
        {
            try
            {
                // Obtener el ID del usuario desde SessionManager
                int userId = SessionManager.UserId;

                // Obtener los datos del usuario desde la API
                var usuario = await _apiService.GetUsuarioAsync(userId);

                if (usuario != null)
                {
                    // Mostrar los datos del usuario en los campos correspondientes
                    nombreUsuarioEntry.Text = usuario.Usuario;
                    correoEntry.Text = usuario.correo;
                }
            }
            catch (Exception ex)
            {
                await DisplayAlert("Error", $"Error al cargar los datos del usuario: {ex.Message}", "OK");
            }
        }

        private async void CargarDatosPaciente()
        {
            try
            {
                // Obtener el ID del paciente desde SessionManager o desde el usuario
                int pacienteId = SessionManager.PacienteId;

                // Obtener los datos del paciente desde la API
                var paciente = await _apiService.GetPacienteAsync(pacienteId);

                if (paciente != null)
                {
                    // Mostrar los datos del paciente en los campos correspondientes
                    nombrePacienteEntry.Text = paciente.nombre;
                    fechaNacimientoDatePicker.Date = paciente.fecha;
                    telefonoEntry.Text = paciente.Telefono.ToString();
                    sangrePicker.SelectedItem = paciente.sangre;
                    religionEntry.Text = paciente.religion;
                    gradoPicker.SelectedItem = paciente.Grado.ToString();
                    dificultadComunicacionPicker.SelectedItem = paciente.comunicacion;
                    telefonoAdicionalEntry.Text = paciente.Extra.ToString();
                }
            }
            catch (Exception ex)
            {
                await DisplayAlert("Error", $"Error al cargar los datos del paciente: {ex.Message}", "OK");
            }
        }

        private async void BtnUserSave_Clicked(object sender, EventArgs e)
        {
            try
            {
                // Obtener el ID del usuario desde SessionManager
                int userId = SessionManager.UserId;

                // Crear un objeto con los datos actualizados del usuario
                var usuarioActualizado = new usuarios
                {
                    Id = userId.ToString(),
                    Usuario = nombreUsuarioEntry.Text,
                    correo = correoEntry.Text,
                    Password = passwordEntry.Text // Si se permite cambiar la contraseña
                };

                // Enviar los datos actualizados a la API
                bool resultado = await _apiService.UpdateUsuarioAsync(usuarioActualizado);

                if (resultado)
                {
                    await DisplayAlert("Éxito", "Datos del usuario actualizados correctamente.", "OK");
                }
                else
                {
                    await DisplayAlert("Error", "No se pudieron actualizar los datos del usuario.", "OK");
                }
            }
            catch (Exception ex)
            {
                await DisplayAlert("Error", $"Error al guardar los datos del usuario: {ex.Message}", "OK");
            }
        }

        private async void BtnPacientSave_Clicked(object sender, EventArgs e)
        {
            try
            {
                // Obtener el ID del paciente desde SessionManager o desde el usuario
                int pacienteId = SessionManager.PacienteId;

                // Crear un objeto con los datos actualizados del paciente
                var pacienteActualizado = new pacientes
                {
                    FkID = pacienteId,
                    nombre = nombrePacienteEntry.Text,
                    fecha = fechaNacimientoDatePicker.Date,
                    Telefono = long.Parse(telefonoEntry.Text),
                    sangre = sangrePicker.SelectedItem?.ToString(),
                    religion = religionEntry.Text,
                    Grado = int.Parse(gradoPicker.SelectedItem?.ToString() ?? "0"),
                    comunicacion = dificultadComunicacionPicker.SelectedItem?.ToString(),
                    Extra = long.Parse(telefonoAdicionalEntry.Text)
                };

                // Enviar los datos actualizados a la API
                bool resultado = await _apiService.UpdatePacienteAsync(pacienteActualizado);

                if (resultado)
                {
                    await DisplayAlert("Éxito", "Datos del paciente actualizados correctamente.", "OK");
                }
                else
                {
                    await DisplayAlert("Error", "No se pudieron actualizar los datos del paciente.", "OK");
                }
            }
            catch (Exception ex)
            {
                await DisplayAlert("Error", $"Error al guardar los datos del paciente: {ex.Message}", "OK");
            }
        }

        private async void OnMapaTapped(object sender, TappedEventArgs e)
        {
            Application.Current.MainPage = new InicioPage();
        }

        private async void OnHistorialTapped(object sender, TappedEventArgs e)
        {
            Application.Current.MainPage = new HistorialPage();
        }

        private async void OnManualTapped(object sender, TappedEventArgs e)
        {
            Application.Current.MainPage = new ManualPage();
        }

        private async void OnPacienteTapped(object sender, TappedEventArgs e)
        {
            Application.Current.MainPage = new MedicalPage();
        }
    }
}